Processor node metadata from Open Ephys v5 is saved as structures (one per
processor node), derived from the "processor" tag parse trees returned by
readstruct(). These metadata structures have the following fields:


Common to all processor node types:


"rawconfig" is the raw XML parse tree for the processor node, as returned
  by "readstruct()".

"procname" is a character vector containing the "pluginName" attribute.
"proclib" is a character vector containing the "libraryName" attribute.
"procnode" is a number containing the "NodeId" attribute.

"channelselect" is a logical vector containing the channel selection state's
  "param" attribute values from all "channel" tags in the processor node.
  This may be an empty vector for special nodes like splitters.
  Note that the "number" attribute starts counting at 0, so the index in
  "channelselect" is equal to "number" + 1.

"descsummary" is a cell array of character vectors containing a
  human-readable short summary of the node configuration. This may be {}.
"descdetailed" is a cell array of character vectors containing a
  human-readable detailed description of the node configuration. This
  may be {}.



For nodes with plugin name 'Intan Rec. Controller':


"samprate" is the sampling rate used by the recording controller, in Hz.
"bandpass" [ low high ] describes the corner frequencies of the headstage
  band-pass filters connected to the controller.
"chanlabels" is a cell array containing the names of the channels
  exported by the recording controller (in Open Ephys's order).



For nodes with plugin name 'Channel Map':


"chanmap" is a structure containing a channel map, per OPENEPHYS_CHANMAP.txt.



For nodes with plugin name 'Record Node':


"writefolder" is a character vector storing the folder path to save to.
"wantevents" is true if events are to be saved, false otherwise.
"wantspikes" is true if spikes are to be saved, false otherwise.
"savedchans" is a logical vector indicating whether each channel is to be
  saved (FIXME: out of those accepted by channelselect?).



For nodes with plugin name "Phase Calculator" (TNE Lab):


"bandcorners" [ low high ] describes the corner frequencies of the phase
  calculator's bandpass filter.
"bandedges" [ low high ] describes the nominal cutoff frequencies of the
  phase calculator's bandpass fitler.

"predictorder" is the order of the AR predictor used by the phase calculator.
"predictupdatems" is the update interval (in ms) for training the predictor.

"outputmode" is a character vector indicating which outputs are produced
  by the phase calculator. Valid values are 'phase', 'magnitude', and 'both'.
  Single outputs replace the input channel; 'both' adds an extra channel
  for magnitude and replaces the input channel with phase.



For nodes with plugin name "Crossing Detector" (TNE Lab):


"inputchan" is the ephys channel number to monitor.
"wantrising" is true if triggers happen when crossing low-to-high.
"wantfalling" is true if triggers happen when crossing high-to-low.

"outputTTLchan" is the number of the output TTL channel to generate events on.
  This is in a new TTL bank (new "event channel").

"threshtype" is a character vector indicating the method by which thresholding
  is performed. Valid values are 'constant', 'random', 'channel', 'adaptive',
  and 'averagemult'.

"threshold" is the threshold value used for 'constant' thresholding, and the
  multiplier used for 'averagemult' thresholding.
"randomrange" [ min max ] is the range threshold values are drawn from when
  using 'random' thresholding (uniform random sampling within that range span).
"extthreshchan" is the analog channel number to use as an externally supplied
  threshold with 'channel' triggering.
"averageseconds" is the approximate smoothing time used for averaging with
  'averagemult' thresholding.

Adaptive thresholding receives an input "indicator" signal and adjusts its
threshold until the input signal meets a target value. Its configuration
parameters are:

"adaptinputname" is a character vector containing the label of the input
  channel to monitor as an "indicator".
"adapttarget" is the value that the algorithm tries to get the indicator
  input to meet.
"adaptinputrange" [ min max ] is the range to which input values should be
  clamped, or [] to not perform clamping.
"adaptoutputrange" [ min max ] is the range to which adjusted threshold
  values should be clamped, or [] to not perform clamping.
"adaptlearnratestart" is the initial learning rate to use when adjusting.
"adaptlearnratemin" is the value to which the learning rate decays towards.
"adaptlearnratedecay" is the decay rate for the learning rate. See the TNE
  Lab web page for a detailed discussion of the algorithm.



For nodes with plugin name "TTL Cond Trigger" (ACC Lab):


"outcount" is the number of outputs (always 4, for now).
"incount" is the number of inputs per output (always 4, for now).

"outconditions" is a cell array with one structure per output; each structure
  has the following fields:

  "enabled" is true if the output is being used and false otherwise.
  "anyall" is 'any' or 'all', indicating how inputs are combined.
  "name" is a character vector containing the output name.

  (Logic processing fields are also present, described below.)

  "inconditions" is a cell array with one structure per input; each structure
    has the following fields:

    "enabled" is true if the input is being used and false otherwise.
    "digbankidx" is the input TTL bank (channel) number, starting at 0.
    "digbit" is the input TTL bit (sub-channel) number, starting at 0.
    "name" is a character vector containing the input name.

    (Logic processing fields are also present, described below.)


Logic processing fields are a set of fields that define how a signal's
output is derived from its input:

  "trigtype" is 'high' (level-triggered active-high), 'low' (level-triggered
    active-low), 'rising' (edge-triggered), or 'falling' (edge-triggered).
  "delayminsamps" and "delaymaxsamps" define the time to wait from the
    trigger conditions being met to the output signal being asserted. For any
    given trigger event, this is uniformly sampled from the specified range.
  "sustainsamps" is the number of samples for which the output is to be
    asserted.
  "deadsamps" is the number of samples that have to elapse between one
    detected trigger event and the next detected trigger event. Detections
    that happen during the dead time are ignored.
  "deglitchsamps" is the number of samples for which the input must be stable
    before a trigger event is recognized. It must be less than or equal to
    "delayminsamps".
  "activehigh" is true if the output is driven high when asserted, and false
    if the output is driven low when asserted.



Unrecognized plugin names will still return the "common to all types"
metadata, which includes the full parse tree, facilitating user processing
of unrecognized configuration information.



(This is the end of the file.)
